{
    "contents" : "---\ntitle: \"MobileHCI Analysis\"\nauthor: \"Jaime Ruiz\"\noutput: html_document\n---\nLibraries\n------------------\n```{r, results=\"hide\", message=FALSE}\nlibrary(doBy);\nlibrary(ggplot2);\nlibrary(nlme);\nlibrary(car); #needed for ANOVA function\nrequire(multcomp)\n```\n\n### Functions\n\n```{r, echo=FALSE}\nIsOutlier = function(trialTime, mean, sd){\n  max = mean+sd*3\n  min = mean-sd*3\n  return(trialTime > max | trialTime < min);\n}\n## Summarizes data.\n## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).\n## If there are within-subject variables, calculate adjusted values using method from Morey (2008).\n##   data: a data frame.\n##   measurevar: the name of a column that contains the variable to be summariezed\n##   groupvars: a vector containing names of columns that contain grouping variables\n##   na.rm: a boolean that indicates whether to ignore NA's\n##   conf.interval: the percent range of the confidence interval (default is 95%)\nsummarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE, conf.interval=.95) {\n    require(doBy)\n\n    # New version of length which can handle NA's: if na.rm==T, don't count them\n    length2 <- function (x, na.rm=FALSE) {\n        if (na.rm) sum(!is.na(x))\n        else       length(x)\n    }\n\n    # Collapse the data\n    formula <- as.formula(paste(measurevar, paste(groupvars, collapse=\" + \"), sep=\" ~ \"))\n    datac <- summaryBy(formula, data=data, FUN=c(length2,mean,sd), na.rm=na.rm)\n\n    # Rename columns\n    names(datac)[ names(datac) == paste(measurevar, \".mean\",    sep=\"\") ] <- measurevar\n    names(datac)[ names(datac) == paste(measurevar, \".sd\",      sep=\"\") ] <- \"sd\"\n    names(datac)[ names(datac) == paste(measurevar, \".length2\", sep=\"\") ] <- \"N\"\n    \n    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean\n    \n    # Confidence interval multiplier for standard error\n    # Calculate t-statistic for confidence interval: \n    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1\n    ciMult <- qt(conf.interval/2 + .5, datac$N-1)\n    datac$ci <- datac$se * ciMult\n    \n    return(datac)\n}\n## Norms the data within specified groups in a data frame; it normalizes each\n## subject (identified by idvar) so that they have the same mean, within each group\n## specified by betweenvars.\n##   data: a data frame.\n##   idvar: the name of a column that identifies each subject (or matched subjects)\n##   measurevar: the name of a column that contains the variable to be summariezed\n##   betweenvars: a vector containing names of columns that are between-subjects variables\n##   na.rm: a boolean that indicates whether to ignore NA's\nnormDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL, na.rm=FALSE) {\n    require(doBy)\n    \n    # Measure var on left, idvar + between vars on right of formula.\n    subjMeanFormula <- as.formula(paste(measurevar, paste(c(idvar, betweenvars), collapse=\" + \"), sep=\" ~ \"))\n    data.subjMean   <- summaryBy(subjMeanFormula, data=data, keep.names=TRUE, na.rm=na.rm)\n    names(data.subjMean)[names(data.subjMean) == measurevar] <- \"subjMean\"\n\n    # Put the subject means with original data\n    data <- merge(data, data.subjMean)\n    \n    # Get the normalized data in a new column\n    measureNormedVar <- paste(measurevar, \"Normed\", sep=\"\")\n    data[,measureNormedVar] <- data[,measurevar] - data[,\"subjMean\"] + mean(data[,measurevar])\n\n    # Remove this subject mean column\n    data$subjMean <- NULL\n    \n    return(data)\n}\n## Summarizes data, handling within-subjects variables by removing inter-subject variability.\n## It will still work if there are no within-S variables.\n## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).\n## If there are within-subject variables, calculate adjusted values using method from Morey (2008).\n##   data: a data frame.\n##   measurevar: the name of a column that contains the variable to be summariezed\n##   betweenvars: a vector containing names of columns that are between-subjects variables\n##   withinvars: a vector containing names of columns that are within-subjects variables\n##   idvar: the name of a column that identifies each subject (or matched subjects)\n##   na.rm: a boolean that indicates whether to ignore NA's\n##   conf.interval: the percent range of the confidence interval (default is 95%)\nsummarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL, idvar=NULL, na.rm=FALSE, conf.interval=.95) {\n    # Norm each subject's data    \n    data <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm)\n    \n    # This is the name of the new column\n    measureNormedVar <- paste(measurevar, \"Normed\", sep=\"\")\n    \n    # Replace the original data column with the normed one\n    data[,measurevar] <- data[,measureNormedVar]\n    \n\n    # Collapse the normed data - now we can treat between and within vars the same\n    datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars), na.rm=na.rm, conf.interval=conf.interval)\n\n\n    # Apply correction from Morey (2008) to the standard error and confidence interval\n    #  Get the product of the number of conditions of within-S variables\n    nWithinGroups    <- prod(sapply(datac[,withinvars, drop=FALSE], FUN=nlevels))\n    correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )\n\n    # Apply the correction factor\n    datac$sd <- datac$sd * correctionFactor\n    datac$se <- datac$se * correctionFactor\n    datac$ci <- datac$ci * correctionFactor\n\n    return(datac)\n}\n\nresize.win <- function(Width=5, Height=3) #default for chi intended use paper\n{\n  # works for windows\n  dev.off(); # dev.new(width=6, height=6)\n  windows(record=TRUE, width=Width, height=Height)\n}\n\n# The palette with grey:\ncbPalette <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n# The palette with black:\ncbbPalette <- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\nbrewerPalette = c(\"#ffeda0\", \"#f03b20\")\n\nIsError = function(value){\n  return(value == 'Correct' & 1)\n}\n```\n\nRead File\n-------------------------\n```{r}\ngestureError<- read.csv(\"C:/Users/sarahms/Dropbox/Research/MOBILEHCI 2015/Glissando Data/GESTURE_ERROR.csv\")\nnames(gestureError)\n\nerrorRate<- read.csv(\"C:/Users/sarahms/Dropbox/Research/MOBILEHCI 2015/Glissando Data/ERROR_RATE.csv\")\n\nC:\\Users\\sarahms\\Dropbox\\Research\\MOBILEHCI 2015\\Glissando Data\nnames(errorRate)\n\n```\n\nGesture Error\n---------------------------\n```{r}\ngestureError = gestureError[which(gestureError$Participant != 8 & gestureError$Participant != 10 & gestureError$Participant != 36 & gestureError$Participant != 46 & gestureError$Participant != 7),]\n\ngestureError$Difference = gestureError$Difference/1000000\n#Filter out errors\nsummary <- subset(gestureError, Outcome == \"Correct\")\nsummaryF <- subset(gestureError, Trial == \"First\")\nsummaryR <- subset(gestureError, Trial == \"Return\")\n\ntrialTimes = summaryBy(Difference~Gesture,data=summaryF, FUN = function(x) { c(m = mean(x), s = sd(x))}) \nsummaryF$outlier = trialTimes$Difference.m[match(summaryF$Gesture,trialTimes$Gesture)]\nsummaryF$outlier2 = trialTimes$Difference.s[match(summaryF$Gesture,trialTimes$Gesture)]\n\nsummaryF$Filter = IsOutlier(summaryF$Difference, summaryF$outlier, summaryF$outlier2);\nnumberOfOutliers = nrow(summaryF[which(summaryF$Filter==1),]);\nprint(\"Number of outliers in First Study\")\nnumberOfOutliers;\nsummaryF = summaryF[which(summaryF$Filter==0),]\n\ntrialTimes = summaryBy(Difference~Gesture,data=summaryR, FUN = function(x) { c(m = mean(x), s = sd(x))}) \nsummaryR$outlier = trialTimes$Difference.m[match(summaryR$Gesture,trialTimes$Gesture)]\nsummaryR$outlier2 = trialTimes$Difference.s[match(summaryR$Gesture,trialTimes$Gesture)]\n\nsummaryR$Filter = IsOutlier(summaryR$Difference, summaryR$outlier, summaryR$outlier2);\nnumberOfOutliers = nrow(summaryR[which(summaryR$Filter==1),]);\nprint(\"Number of outliers in Return Study\")\nnumberOfOutliers;\nsummaryR = summaryR[which(summaryR$Filter==0),]\ngestureError = rbind(summaryF, summaryR)\nmeans = summaryBy(Difference~Gesture+Trial+Condition+Participant, keep.names=TRUE,data=gestureError)\naov.out = aov(Difference~Condition*Trial*Gesture + Error(Participant/Gesture), data=means)\nsummary(aov.out)\n```\n\nFirst\n```{r, echo=FALSE}\nsumsumF = subset(means, Trial=\"First\");\naov.out = aov(Difference~Condition*Gesture + Error(Participant/Gesture), data=sumsumF)\nsummary(aov.out)\noverall = summaryBy(Difference~Trial+Condition+Participant, keep.names=TRUE, data=means)\noverall$Gesture = \"Overall\" \ngraphData = rbind(means,overall)\nsumsumF <- subset(graphData, Trial == \"First\")\nsumsumF = summarySE(sumsumF, measurevar=\"Difference\", groupvars=c(\"Gesture\",\"Condition\"))\ng = ggplot(sumsumF, aes(x=Gesture, y=Difference, fill=Condition)) + \n  scale_x_discrete(limits=c(\"Overall\", \"DoubleFlip\", \"FlickDown\", \"FlickUp\", \"FlickRight\", \"FlickLeft\"), labels=c(\"Overall\", \"DoubleFlip\", \"FlickDown\",  \"FlickUp\", \"FlickRight\", \"FlickLeft\")) + \n  geom_bar(position=position_dodge(), stat=\"identity\")  +theme_bw()+ scale_fill_manual(values=brewerPalette)+ theme(legend.title = element_text( size=10, face=\"bold\"))+\n  ylab(\"Gesture Error (ms)\") + geom_errorbar(aes(ymin=Difference-se, ymax=Difference+se),\n                  width=.2,                    # Width of the error bars\n                  position=position_dodge(.9))+ theme(legend.position=\"none\") ;\ng\nresize.win()\nggsave(\"First_no_legend.png\", dpi=300)\n\ng = ggplot(sumsumF, aes(x=Gesture, y=Difference, fill=Condition)) + \n  scale_x_discrete(limits=c(\"Overall\", \"DoubleFlip\", \"FlickDown\", \"FlickUp\", \"FlickRight\", \"FlickLeft\"), labels=c(\"Overall\", \"DoubleFlip\", \"FlickDown\",  \"FlickUp\", \"FlickRight\", \"FlickLeft\")) + \n  geom_bar(position=position_dodge(), stat=\"identity\")  +theme_bw()+ scale_fill_manual(values=brewerPalette)+ theme(legend.title = element_text( size=10, face=\"bold\"))+\n  ylab(\"Gesture Error (ms)\") + geom_errorbar(aes(ymin=Difference-se, ymax=Difference+se),\n                  width=.2,                    # Width of the error bars\n                  position=position_dodge(.9))+ theme(legend.title = element_text( size=10, face=\"bold\"), legend.position=\"top\") ;\ng\nresize.win()\nggsave(\"First_top_legend.png\", dpi=300)\n```\nReturn\n```{r, echo=FALSE}\nsumsumR = subset(means, Trial=\"Return\");\naov.out = aov(Difference~Condition*Gesture + Error(Participant/Gesture), data=sumsumR)\nsummary(aov.out)\n\nsumsumR <- subset(graphData, Trial == \"Return\")\nsumsumR = summarySE(sumsumR, measurevar=\"Difference\", groupvars=c(\"Gesture\",\"Condition\"))\ng = ggplot(sumsumR, aes(x=Gesture, y=Difference, fill=Condition)) + \n  scale_x_discrete(limits=c(\"Overall\", \"DoubleFlip\", \"FlickDown\", \"FlickUp\", \"FlickRight\", \"FlickLeft\"), labels=c(\"Overall\", \"DoubleFlip\", \"FlickDown\",  \"FlickUp\", \"FlickRight\", \"FlickLeft\")) + \n  geom_bar(position=position_dodge(), stat=\"identity\")  +theme_bw()+ scale_fill_manual(values=brewerPalette)+ theme(legend.title = element_text( size=10, face=\"bold\"))+\n  ylab(\"Gesture Error (ms)\") + geom_errorbar(aes(ymin=Difference-se, ymax=Difference+se),\n                  width=.2,                    # Width of the error bars\n                  position=position_dodge(.9))+ theme(legend.position=\"none\") ;\ng\nresize.win()\nggsave(\"Return_no_legend.png\", dpi=300)\ng\n```",
    "created" : 1423252356843.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "479310080",
    "id" : "7174A744",
    "lastKnownWriteTime" : 1423252473,
    "path" : "C:/Users/sarahms/Dropbox/Research/MOBILEHCI 2015/Glissando Data/Analysis/MobileHCI.rmd",
    "project_path" : "MobileHCI.rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}